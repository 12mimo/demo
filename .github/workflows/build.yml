name: Build and Release Python App

on:
  push:
    branches:
      - main  # 触发操作的分支
  pull_request:
    branches:
      - main  # 触发操作的分支

jobs:
  build:
    runs-on: macos-latest  # 选择 macOS 作为构建环境

    steps:
    - name: Checkout code
      uses: actions/checkout@v2  # 拉取仓库代码

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.13'  # 设置 Python 版本

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt  # 安装项目依赖

    - name: Install PyInstaller
      run: pip install pyinstaller  # 安装 PyInstaller

    - name: Build macOS application for ARM architecture
      run: |
        pyinstaller --onedir --distpath ./dist/mac/arm64 --workpath ./build/mac/arm64 --name demo --windowed main.py  # ARM 架构

    - name: Build macOS application for x86_64 architecture
      run: |
        arch -x86_64 pyinstaller --onedir --distpath ./dist/mac/x86_64 --workpath ./build/mac/x86_64 --name demo --windowed main.py  # x86_64 架构

    - name: Merge ARM and x86_64 binaries
      run: |
        lipo -create ./dist/mac/arm64/demo ./dist/mac/x86_64/demo -output ./dist/mac/demo.app/Contents/MacOS/demo  # 合并二进制文件

    - name: Upload macOS build artifact
      uses: actions/upload-artifact@v4  # 上传打包后的文件作为 GitHub 工件
      with:
        name: macOS-build
        path: ./dist/mac/demo.app  # 上传 .app 文件

  build_windows:
    runs-on: windows-latest  # 选择 Windows 作为构建环境

    steps:
    - name: Checkout code
      uses: actions/checkout@v2  # 拉取仓库代码

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.13'  # 设置 Python 版本

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt  # 安装项目依赖

    - name: Install PyInstaller
      run: pip install pyinstaller  # 安装 PyInstaller

    - name: Build Windows application
      run: |
        pyinstaller --onedir --distpath ./dist/windows --workpath ./build/windows --name demo --windowed main.py  # 打包 Windows 可执行文件

    - name: Upload Windows build artifact
      uses: actions/upload-artifact@v4  # 上传 Windows 可执行文件
      with:
        name: windows-build
        path: ./dist/windows/demo.exe  # 上传 .exe 文件

  create_release:
    runs-on: ubuntu-latest  # 运行环境选择 Ubuntu

    needs: [build, build_windows]  # 确保构建成功后再执行创建 Release

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Create Git tag
      run: |
        TAG_NAME=v1.0.0  # 可以根据需要修改版本号
        git tag $TAG_NAME  # 创建 Git 标签
        # 使用 GITHUB_TOKEN 推送标签
        git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} $TAG_NAME  # 推送标签
